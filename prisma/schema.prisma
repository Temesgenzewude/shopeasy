// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  slug        String   @unique(map: "product_slug_idx")
  category    String
  price       Decimal @default(0) @db.Decimal(12, 2)
  stock       Int @default(0)
  rating      Decimal @default(0) @db.Decimal(12, 2)
  brand       String?
  images      String[]
  numberOfReviews Int @default(0)
  isFeatured  Boolean @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  @@index([name])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @default("NON_NAME")
  email         String   @unique (map: "user_email_idx")
  emailVerified DateTime?  @db.Timestamp(6)
  password      String?
  role          String   @default("user")
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)
  address       Json?
  image         String?
  paymentMethod String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}


model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @updatedAt @db.Timestamp(6)
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id
  sessionToken String   @unique @map("session_token")
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @db.Timestamp(6)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
